[2024-06-28T04:34:32.181+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-06-28T04:34:32.212+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: weather_data_pipeline.predict_weather scheduled__2024-06-27T00:00:00+00:00 [queued]>
[2024-06-28T04:34:32.222+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: weather_data_pipeline.predict_weather scheduled__2024-06-27T00:00:00+00:00 [queued]>
[2024-06-28T04:34:32.222+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 2
[2024-06-28T04:34:32.244+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): predict_weather> on 2024-06-27 00:00:00+00:00
[2024-06-28T04:34:32.252+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=265) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-06-28T04:34:32.254+0000] {standard_task_runner.py:63} INFO - Started process 267 to run task
[2024-06-28T04:34:32.255+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'weather_data_pipeline', 'predict_weather', 'scheduled__2024-06-27T00:00:00+00:00', '--job-id', '5', '--raw', '--subdir', 'DAGS_FOLDER/weather_dag.py', '--cfg-path', '/tmp/tmpgzs2ac65']
[2024-06-28T04:34:32.256+0000] {standard_task_runner.py:91} INFO - Job 5: Subtask predict_weather
[2024-06-28T04:34:32.312+0000] {task_command.py:426} INFO - Running <TaskInstance: weather_data_pipeline.predict_weather scheduled__2024-06-27T00:00:00+00:00 [running]> on host 89f67e375573
[2024-06-28T04:34:32.417+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='weather_data_pipeline' AIRFLOW_CTX_TASK_ID='predict_weather' AIRFLOW_CTX_EXECUTION_DATE='2024-06-27T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-06-27T00:00:00+00:00'
[2024-06-28T04:34:32.419+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-06-28T04:34:33.286+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-06-28T04:34:33.286+0000] {taskinstance.py:2905} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 465, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 432, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 401, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 235, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 252, in execute_callable
    return self.python_callable(*self.op_args, **self.op_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/scripts/predict.py", line 23, in predict_weather
    data['predicted_temperature_2m'] = model.predict(features)
                                       ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/linear_model/_base.py", line 306, in predict
    return self._decision_function(X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/linear_model/_base.py", line 285, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 1059, in check_array
    _assert_all_finite(
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
[2024-06-28T04:34:33.299+0000] {taskinstance.py:1206} INFO - Marking task as UP_FOR_RETRY. dag_id=weather_data_pipeline, task_id=predict_weather, run_id=scheduled__2024-06-27T00:00:00+00:00, execution_date=20240627T000000, start_date=20240628T043432, end_date=20240628T043433
[2024-06-28T04:34:33.315+0000] {standard_task_runner.py:110} ERROR - Failed to execute job 5 for task predict_weather (Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values; 267)
[2024-06-28T04:34:33.365+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 1
[2024-06-28T04:34:33.381+0000] {taskinstance.py:3503} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-06-28T04:34:33.386+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
